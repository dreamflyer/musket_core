#%RAML 1.0 Library
uses:
  meta: meta.raml
  aug: augmenters.raml
  cb: callbacks.raml
(meta.module):  classification_pipeline.classification
types:
  HasLoss:
    type: object
    (meta.abstract): true
    properties:
      loss?:
        (meta.custom): true
        type: string
        (meta.suggestions):
          - binary_crossentropy
          - categorical_crossentropy
          - dice_loss
          - jaccard_loss
          - focal_loss #This one is very unstable
          - lovasz_loss
  AugmenterConfig:
      type: object
      properties?:
        name: string
  ClassificationPipeline:
    (meta.entry): true
    type: HasLoss
    discriminator: architecture
    properties:
      inference_batch:
         (meta.custom): true
         type: number
      testSplit?: 
         (meta.custom): true
         type: number
      testSplitSeed?:
         (meta.custom): true 
         type: number
      testTimeAugmentation:
         (meta.custom): true
         type: string
      classifier:
        type: string
        (meta.custom): true
        enum: [ResNet50,DenseNet121,DenseNet169,DenseNet201,NASNetLarge,InceptionV3,NASNetMobile,VGG16,VGG19,Xception,InceptionResNetV2,MobileNet,MobileNetV2]
      folds_count?:
        type: integer
        (meta.custom): true
      copyWeights?:
        type: boolean
        (meta.custom): true
      random_state?:
        type: integer
        (meta.custom): true
      extra_train_data?:
        type: string
        (meta.custom): true
      dropout?:
        type: number
        (meta.custom): true
      dataset_augmenter?:
        type: AugmenterConfig
        (meta.custom): true
      manualResize:
        type: boolean
        (meta.custom): true
      architecture?:
        (meta.custom): true
        type: string
        enum: ['resnet18', 'resnet50', 'resnet101', 'resnet152', 'seresnet18', 'seresnet34', 'seresnet50', 'seresnet101', 'seresnet152', 'seresnext50', 'seresnext101', 'senet154', 'resnet50v2', 'resnet101v2', 'resnet152v2', 'resnext50', 'resnext101', 'vgg16', 'vgg19', 'densenet121', 'densenet169', 'densenet201', 'inceptionresnetv2', 'inceptionv3', 'xception', 'nasnetlarge', 'nasnetmobile', 'mobilenet', 'mobilenetv2']
      weights?:
        enum: [imagenet, imagenet11k-places365ch,imagenet11k]
      classes:
        type: integer
        minimum: 1
      crops?:
        type: integer
        (meta.custom): true
      activation:
        (meta.custom): true
        enum: [ sigmoid, softmax ]
      shape:
        (meta.alias): input_shape
        type: meta.image_shape
      augmentation:
        type: aug.Augmenter[]
        (meta.custom): true
      transforms:
        type: aug.Augmenter[]
        (meta.custom): true
      ###Optimizer configuration
      optimizer?:
        type: string
        enum: [SGD,Adam,RMSprop,Nadam]
        (meta.custom): true
      lr?:
        type: number
        (meta.custom): true
      clipnorm?:
        type: number
        (meta.custom): true
      clipvalue?:
        type: number
        (meta.custom): true
      #####################################
      loss?: #Remove it when we have better python loader
        (meta.custom): true
      batch?:
        type: integer
        (meta.custom): true
        minimum: 1
        default: 16
      metrics:
        type: string[]
        (meta.custom): true
        (meta.suggestions):
          - binary_accuracy
          - dice
          - iou
          - iot #at 0.5 treshold
      primary_metric:
        type: string
        (meta.custom): true
      primary_metric_mode?:
        type: string
        enum: [auto,min,max]
        (meta.custom): true
        default: auto
      callbacks?:
        type: cb.Callback[]
        (meta.custom): true
      stages  :
        type: StageConfig[]
        (meta.custom): true
      freeze_encoder?: boolean
  St:
    type: string
    enum: [ none  , real ]
  StageConfig:
    type: HasLoss
    properties:
      initial_weights?: string
      epochs?: number
      unfreeze_encoder?: boolean
      lr?: number
      callbacks?: cb.Callback[]
      extra_callbacks?: cb.Callback[]